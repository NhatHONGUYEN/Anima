datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  likes         Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Anime {
  mal_id         Int       @id @unique
  title          String
  title_english  String?
  title_japanese String?
  image_url      String?
  synopsis       String?
  score          Float?
  scored_by      Int?
  rank           Int?
  popularity     Int?
  members        Int?
  favorites      Int?
  type           String?
  episodes       Int?
  status         String?
  duration       String?
  rating         String?
  genres         String[]
  studios        String[]
  aired_from     DateTime?
  aired_to       DateTime?
  likes          Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  userId String
  mal_id Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  anime  Anime  @relation(fields: [mal_id], references: [mal_id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, mal_id]) // ðŸ‘ˆ ClÃ© primaire composite
}
